// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.3
// source: proto/user-service/service.proto

package user_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServiceClient interface {
	V1Login(ctx context.Context, in *V1LoginRequest, opts ...grpc.CallOption) (*V1LoginResponse, error)
	V1GetAll(ctx context.Context, in *V1GetAllRequest, opts ...grpc.CallOption) (*V1GetAllResponse, error)
	V1ValidateToken(ctx context.Context, in *V1ValidateTokenRequest, opts ...grpc.CallOption) (*V1ValidateTokenResponse, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) V1Login(ctx context.Context, in *V1LoginRequest, opts ...grpc.CallOption) (*V1LoginResponse, error) {
	out := new(V1LoginResponse)
	err := c.cc.Invoke(ctx, "/proto.UserService/V1Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) V1GetAll(ctx context.Context, in *V1GetAllRequest, opts ...grpc.CallOption) (*V1GetAllResponse, error) {
	out := new(V1GetAllResponse)
	err := c.cc.Invoke(ctx, "/proto.UserService/V1GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) V1ValidateToken(ctx context.Context, in *V1ValidateTokenRequest, opts ...grpc.CallOption) (*V1ValidateTokenResponse, error) {
	out := new(V1ValidateTokenResponse)
	err := c.cc.Invoke(ctx, "/proto.UserService/V1ValidateToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
// All implementations must embed UnimplementedUserServiceServer
// for forward compatibility
type UserServiceServer interface {
	V1Login(context.Context, *V1LoginRequest) (*V1LoginResponse, error)
	V1GetAll(context.Context, *V1GetAllRequest) (*V1GetAllResponse, error)
	V1ValidateToken(context.Context, *V1ValidateTokenRequest) (*V1ValidateTokenResponse, error)
	mustEmbedUnimplementedUserServiceServer()
}

// UnimplementedUserServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserServiceServer struct {
}

func (UnimplementedUserServiceServer) V1Login(context.Context, *V1LoginRequest) (*V1LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method V1Login not implemented")
}
func (UnimplementedUserServiceServer) V1GetAll(context.Context, *V1GetAllRequest) (*V1GetAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method V1GetAll not implemented")
}
func (UnimplementedUserServiceServer) V1ValidateToken(context.Context, *V1ValidateTokenRequest) (*V1ValidateTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method V1ValidateToken not implemented")
}
func (UnimplementedUserServiceServer) mustEmbedUnimplementedUserServiceServer() {}

// UnsafeUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceServer will
// result in compilation errors.
type UnsafeUserServiceServer interface {
	mustEmbedUnimplementedUserServiceServer()
}

func RegisterUserServiceServer(s grpc.ServiceRegistrar, srv UserServiceServer) {
	s.RegisterService(&UserService_ServiceDesc, srv)
}

func _UserService_V1Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(V1LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).V1Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.UserService/V1Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).V1Login(ctx, req.(*V1LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_V1GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(V1GetAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).V1GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.UserService/V1GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).V1GetAll(ctx, req.(*V1GetAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_V1ValidateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(V1ValidateTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).V1ValidateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.UserService/V1ValidateToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).V1ValidateToken(ctx, req.(*V1ValidateTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserService_ServiceDesc is the grpc.ServiceDesc for UserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "V1Login",
			Handler:    _UserService_V1Login_Handler,
		},
		{
			MethodName: "V1GetAll",
			Handler:    _UserService_V1GetAll_Handler,
		},
		{
			MethodName: "V1ValidateToken",
			Handler:    _UserService_V1ValidateToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/user-service/service.proto",
}
