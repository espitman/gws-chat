// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/espitman/gws-chat/message-service/internal/adapter/database/postgres/ent/message"
	"github.com/espitman/gws-chat/message-service/internal/adapter/database/postgres/ent/predicate"
)

// MessageUpdate is the builder for updating Message entities.
type MessageUpdate struct {
	config
	hooks     []Hook
	mutation  *MessageMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the MessageUpdate builder.
func (mu *MessageUpdate) Where(ps ...predicate.Message) *MessageUpdate {
	mu.mutation.Where(ps...)
	return mu
}

// SetRoomID sets the "RoomID" field.
func (mu *MessageUpdate) SetRoomID(s string) *MessageUpdate {
	mu.mutation.SetRoomID(s)
	return mu
}

// SetNillableRoomID sets the "RoomID" field if the given value is not nil.
func (mu *MessageUpdate) SetNillableRoomID(s *string) *MessageUpdate {
	if s != nil {
		mu.SetRoomID(*s)
	}
	return mu
}

// SetUserID sets the "UserID" field.
func (mu *MessageUpdate) SetUserID(u uint32) *MessageUpdate {
	mu.mutation.ResetUserID()
	mu.mutation.SetUserID(u)
	return mu
}

// SetNillableUserID sets the "UserID" field if the given value is not nil.
func (mu *MessageUpdate) SetNillableUserID(u *uint32) *MessageUpdate {
	if u != nil {
		mu.SetUserID(*u)
	}
	return mu
}

// AddUserID adds u to the "UserID" field.
func (mu *MessageUpdate) AddUserID(u int32) *MessageUpdate {
	mu.mutation.AddUserID(u)
	return mu
}

// SetBody sets the "Body" field.
func (mu *MessageUpdate) SetBody(s string) *MessageUpdate {
	mu.mutation.SetBody(s)
	return mu
}

// SetNillableBody sets the "Body" field if the given value is not nil.
func (mu *MessageUpdate) SetNillableBody(s *string) *MessageUpdate {
	if s != nil {
		mu.SetBody(*s)
	}
	return mu
}

// SetTime sets the "Time" field.
func (mu *MessageUpdate) SetTime(t time.Time) *MessageUpdate {
	mu.mutation.SetTime(t)
	return mu
}

// SetNillableTime sets the "Time" field if the given value is not nil.
func (mu *MessageUpdate) SetNillableTime(t *time.Time) *MessageUpdate {
	if t != nil {
		mu.SetTime(*t)
	}
	return mu
}

// Mutation returns the MessageMutation object of the builder.
func (mu *MessageUpdate) Mutation() *MessageMutation {
	return mu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mu *MessageUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, mu.sqlSave, mu.mutation, mu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mu *MessageUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *MessageUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *MessageUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (mu *MessageUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *MessageUpdate {
	mu.modifiers = append(mu.modifiers, modifiers...)
	return mu
}

func (mu *MessageUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(message.Table, message.Columns, sqlgraph.NewFieldSpec(message.FieldID, field.TypeInt))
	if ps := mu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mu.mutation.RoomID(); ok {
		_spec.SetField(message.FieldRoomID, field.TypeString, value)
	}
	if value, ok := mu.mutation.UserID(); ok {
		_spec.SetField(message.FieldUserID, field.TypeUint32, value)
	}
	if value, ok := mu.mutation.AddedUserID(); ok {
		_spec.AddField(message.FieldUserID, field.TypeUint32, value)
	}
	if value, ok := mu.mutation.Body(); ok {
		_spec.SetField(message.FieldBody, field.TypeString, value)
	}
	if value, ok := mu.mutation.Time(); ok {
		_spec.SetField(message.FieldTime, field.TypeTime, value)
	}
	_spec.AddModifiers(mu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{message.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mu.mutation.done = true
	return n, nil
}

// MessageUpdateOne is the builder for updating a single Message entity.
type MessageUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *MessageMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetRoomID sets the "RoomID" field.
func (muo *MessageUpdateOne) SetRoomID(s string) *MessageUpdateOne {
	muo.mutation.SetRoomID(s)
	return muo
}

// SetNillableRoomID sets the "RoomID" field if the given value is not nil.
func (muo *MessageUpdateOne) SetNillableRoomID(s *string) *MessageUpdateOne {
	if s != nil {
		muo.SetRoomID(*s)
	}
	return muo
}

// SetUserID sets the "UserID" field.
func (muo *MessageUpdateOne) SetUserID(u uint32) *MessageUpdateOne {
	muo.mutation.ResetUserID()
	muo.mutation.SetUserID(u)
	return muo
}

// SetNillableUserID sets the "UserID" field if the given value is not nil.
func (muo *MessageUpdateOne) SetNillableUserID(u *uint32) *MessageUpdateOne {
	if u != nil {
		muo.SetUserID(*u)
	}
	return muo
}

// AddUserID adds u to the "UserID" field.
func (muo *MessageUpdateOne) AddUserID(u int32) *MessageUpdateOne {
	muo.mutation.AddUserID(u)
	return muo
}

// SetBody sets the "Body" field.
func (muo *MessageUpdateOne) SetBody(s string) *MessageUpdateOne {
	muo.mutation.SetBody(s)
	return muo
}

// SetNillableBody sets the "Body" field if the given value is not nil.
func (muo *MessageUpdateOne) SetNillableBody(s *string) *MessageUpdateOne {
	if s != nil {
		muo.SetBody(*s)
	}
	return muo
}

// SetTime sets the "Time" field.
func (muo *MessageUpdateOne) SetTime(t time.Time) *MessageUpdateOne {
	muo.mutation.SetTime(t)
	return muo
}

// SetNillableTime sets the "Time" field if the given value is not nil.
func (muo *MessageUpdateOne) SetNillableTime(t *time.Time) *MessageUpdateOne {
	if t != nil {
		muo.SetTime(*t)
	}
	return muo
}

// Mutation returns the MessageMutation object of the builder.
func (muo *MessageUpdateOne) Mutation() *MessageMutation {
	return muo.mutation
}

// Where appends a list predicates to the MessageUpdate builder.
func (muo *MessageUpdateOne) Where(ps ...predicate.Message) *MessageUpdateOne {
	muo.mutation.Where(ps...)
	return muo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (muo *MessageUpdateOne) Select(field string, fields ...string) *MessageUpdateOne {
	muo.fields = append([]string{field}, fields...)
	return muo
}

// Save executes the query and returns the updated Message entity.
func (muo *MessageUpdateOne) Save(ctx context.Context) (*Message, error) {
	return withHooks(ctx, muo.sqlSave, muo.mutation, muo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (muo *MessageUpdateOne) SaveX(ctx context.Context) *Message {
	node, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muo *MessageUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *MessageUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (muo *MessageUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *MessageUpdateOne {
	muo.modifiers = append(muo.modifiers, modifiers...)
	return muo
}

func (muo *MessageUpdateOne) sqlSave(ctx context.Context) (_node *Message, err error) {
	_spec := sqlgraph.NewUpdateSpec(message.Table, message.Columns, sqlgraph.NewFieldSpec(message.FieldID, field.TypeInt))
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Message.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := muo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, message.FieldID)
		for _, f := range fields {
			if !message.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != message.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := muo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := muo.mutation.RoomID(); ok {
		_spec.SetField(message.FieldRoomID, field.TypeString, value)
	}
	if value, ok := muo.mutation.UserID(); ok {
		_spec.SetField(message.FieldUserID, field.TypeUint32, value)
	}
	if value, ok := muo.mutation.AddedUserID(); ok {
		_spec.AddField(message.FieldUserID, field.TypeUint32, value)
	}
	if value, ok := muo.mutation.Body(); ok {
		_spec.SetField(message.FieldBody, field.TypeString, value)
	}
	if value, ok := muo.mutation.Time(); ok {
		_spec.SetField(message.FieldTime, field.TypeTime, value)
	}
	_spec.AddModifiers(muo.modifiers...)
	_node = &Message{config: muo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{message.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	muo.mutation.done = true
	return _node, nil
}
