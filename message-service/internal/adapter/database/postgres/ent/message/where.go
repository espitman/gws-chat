// Code generated by ent, DO NOT EDIT.

package message

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/espitman/gws-chat/message-service/internal/adapter/database/postgres/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Message {
	return predicate.Message(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Message {
	return predicate.Message(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Message {
	return predicate.Message(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Message {
	return predicate.Message(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Message {
	return predicate.Message(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Message {
	return predicate.Message(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Message {
	return predicate.Message(sql.FieldLTE(FieldID, id))
}

// RoomID applies equality check predicate on the "RoomID" field. It's identical to RoomIDEQ.
func RoomID(v string) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldRoomID, v))
}

// UserID applies equality check predicate on the "UserID" field. It's identical to UserIDEQ.
func UserID(v uint32) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldUserID, v))
}

// Body applies equality check predicate on the "Body" field. It's identical to BodyEQ.
func Body(v string) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldBody, v))
}

// Time applies equality check predicate on the "Time" field. It's identical to TimeEQ.
func Time(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldTime, v))
}

// RoomIDEQ applies the EQ predicate on the "RoomID" field.
func RoomIDEQ(v string) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldRoomID, v))
}

// RoomIDNEQ applies the NEQ predicate on the "RoomID" field.
func RoomIDNEQ(v string) predicate.Message {
	return predicate.Message(sql.FieldNEQ(FieldRoomID, v))
}

// RoomIDIn applies the In predicate on the "RoomID" field.
func RoomIDIn(vs ...string) predicate.Message {
	return predicate.Message(sql.FieldIn(FieldRoomID, vs...))
}

// RoomIDNotIn applies the NotIn predicate on the "RoomID" field.
func RoomIDNotIn(vs ...string) predicate.Message {
	return predicate.Message(sql.FieldNotIn(FieldRoomID, vs...))
}

// RoomIDGT applies the GT predicate on the "RoomID" field.
func RoomIDGT(v string) predicate.Message {
	return predicate.Message(sql.FieldGT(FieldRoomID, v))
}

// RoomIDGTE applies the GTE predicate on the "RoomID" field.
func RoomIDGTE(v string) predicate.Message {
	return predicate.Message(sql.FieldGTE(FieldRoomID, v))
}

// RoomIDLT applies the LT predicate on the "RoomID" field.
func RoomIDLT(v string) predicate.Message {
	return predicate.Message(sql.FieldLT(FieldRoomID, v))
}

// RoomIDLTE applies the LTE predicate on the "RoomID" field.
func RoomIDLTE(v string) predicate.Message {
	return predicate.Message(sql.FieldLTE(FieldRoomID, v))
}

// RoomIDContains applies the Contains predicate on the "RoomID" field.
func RoomIDContains(v string) predicate.Message {
	return predicate.Message(sql.FieldContains(FieldRoomID, v))
}

// RoomIDHasPrefix applies the HasPrefix predicate on the "RoomID" field.
func RoomIDHasPrefix(v string) predicate.Message {
	return predicate.Message(sql.FieldHasPrefix(FieldRoomID, v))
}

// RoomIDHasSuffix applies the HasSuffix predicate on the "RoomID" field.
func RoomIDHasSuffix(v string) predicate.Message {
	return predicate.Message(sql.FieldHasSuffix(FieldRoomID, v))
}

// RoomIDEqualFold applies the EqualFold predicate on the "RoomID" field.
func RoomIDEqualFold(v string) predicate.Message {
	return predicate.Message(sql.FieldEqualFold(FieldRoomID, v))
}

// RoomIDContainsFold applies the ContainsFold predicate on the "RoomID" field.
func RoomIDContainsFold(v string) predicate.Message {
	return predicate.Message(sql.FieldContainsFold(FieldRoomID, v))
}

// UserIDEQ applies the EQ predicate on the "UserID" field.
func UserIDEQ(v uint32) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "UserID" field.
func UserIDNEQ(v uint32) predicate.Message {
	return predicate.Message(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "UserID" field.
func UserIDIn(vs ...uint32) predicate.Message {
	return predicate.Message(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "UserID" field.
func UserIDNotIn(vs ...uint32) predicate.Message {
	return predicate.Message(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "UserID" field.
func UserIDGT(v uint32) predicate.Message {
	return predicate.Message(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "UserID" field.
func UserIDGTE(v uint32) predicate.Message {
	return predicate.Message(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "UserID" field.
func UserIDLT(v uint32) predicate.Message {
	return predicate.Message(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "UserID" field.
func UserIDLTE(v uint32) predicate.Message {
	return predicate.Message(sql.FieldLTE(FieldUserID, v))
}

// BodyEQ applies the EQ predicate on the "Body" field.
func BodyEQ(v string) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldBody, v))
}

// BodyNEQ applies the NEQ predicate on the "Body" field.
func BodyNEQ(v string) predicate.Message {
	return predicate.Message(sql.FieldNEQ(FieldBody, v))
}

// BodyIn applies the In predicate on the "Body" field.
func BodyIn(vs ...string) predicate.Message {
	return predicate.Message(sql.FieldIn(FieldBody, vs...))
}

// BodyNotIn applies the NotIn predicate on the "Body" field.
func BodyNotIn(vs ...string) predicate.Message {
	return predicate.Message(sql.FieldNotIn(FieldBody, vs...))
}

// BodyGT applies the GT predicate on the "Body" field.
func BodyGT(v string) predicate.Message {
	return predicate.Message(sql.FieldGT(FieldBody, v))
}

// BodyGTE applies the GTE predicate on the "Body" field.
func BodyGTE(v string) predicate.Message {
	return predicate.Message(sql.FieldGTE(FieldBody, v))
}

// BodyLT applies the LT predicate on the "Body" field.
func BodyLT(v string) predicate.Message {
	return predicate.Message(sql.FieldLT(FieldBody, v))
}

// BodyLTE applies the LTE predicate on the "Body" field.
func BodyLTE(v string) predicate.Message {
	return predicate.Message(sql.FieldLTE(FieldBody, v))
}

// BodyContains applies the Contains predicate on the "Body" field.
func BodyContains(v string) predicate.Message {
	return predicate.Message(sql.FieldContains(FieldBody, v))
}

// BodyHasPrefix applies the HasPrefix predicate on the "Body" field.
func BodyHasPrefix(v string) predicate.Message {
	return predicate.Message(sql.FieldHasPrefix(FieldBody, v))
}

// BodyHasSuffix applies the HasSuffix predicate on the "Body" field.
func BodyHasSuffix(v string) predicate.Message {
	return predicate.Message(sql.FieldHasSuffix(FieldBody, v))
}

// BodyEqualFold applies the EqualFold predicate on the "Body" field.
func BodyEqualFold(v string) predicate.Message {
	return predicate.Message(sql.FieldEqualFold(FieldBody, v))
}

// BodyContainsFold applies the ContainsFold predicate on the "Body" field.
func BodyContainsFold(v string) predicate.Message {
	return predicate.Message(sql.FieldContainsFold(FieldBody, v))
}

// TimeEQ applies the EQ predicate on the "Time" field.
func TimeEQ(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldTime, v))
}

// TimeNEQ applies the NEQ predicate on the "Time" field.
func TimeNEQ(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldNEQ(FieldTime, v))
}

// TimeIn applies the In predicate on the "Time" field.
func TimeIn(vs ...time.Time) predicate.Message {
	return predicate.Message(sql.FieldIn(FieldTime, vs...))
}

// TimeNotIn applies the NotIn predicate on the "Time" field.
func TimeNotIn(vs ...time.Time) predicate.Message {
	return predicate.Message(sql.FieldNotIn(FieldTime, vs...))
}

// TimeGT applies the GT predicate on the "Time" field.
func TimeGT(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldGT(FieldTime, v))
}

// TimeGTE applies the GTE predicate on the "Time" field.
func TimeGTE(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldGTE(FieldTime, v))
}

// TimeLT applies the LT predicate on the "Time" field.
func TimeLT(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldLT(FieldTime, v))
}

// TimeLTE applies the LTE predicate on the "Time" field.
func TimeLTE(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldLTE(FieldTime, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Message) predicate.Message {
	return predicate.Message(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Message) predicate.Message {
	return predicate.Message(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Message) predicate.Message {
	return predicate.Message(sql.NotPredicates(p))
}
